What happens when you initialize a repository? Why do you need to do it?

	When a repo is initialized, a .git file is placed in the directory of the repo that stores metadata
	of all the "history" of the files.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	The staging area lies between the working directory and the repository and grants the user more 
	control over the kind of changes that would be committed. 

How can you use the staging area to make sure you have one commit per logical
change?
	
	If you're working on multiple files at a time but only want to commit the changes of one 
	file because the change is logically separate from the change in other files, you could
	just add the file to the staging area and then commit. If there was no staging area, git commit
	would commit all the changes into one commit even when they're logically separate just because 
	you were working on multiple files.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	When I want to create an experimental version that I want everybody to be able to try but not
	let it be the "main" version of the program.

How do the diagrams help you visualize the branch structure?
	
	The diagrams help me visualize the branch structure to help me understand what happens if you 
	checkout an older commit without treating it as a branch and continuing on from there. This 
	new "unnamed branch" can get "lost".

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	Lines added by any of the branches are added to the merged branched, whereas lines that were 
        removed from any of the branches are not kept in the merged branched. 
	

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

